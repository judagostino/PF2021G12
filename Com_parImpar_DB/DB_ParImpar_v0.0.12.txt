USE [ParImpar]
GO

/****** Object:  StoredProcedure [dbo].[Posts_GetAll]    Script Date: 4/2/2024 18:44:25 ******/
DROP PROCEDURE [dbo].[Posts_GetAll]
GO

/****** Object:  StoredProcedure [dbo].[Posts_GetAll]    Script Date: 4/2/2024 18:44:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[Posts_GetAll]
(
	@ContactId INT,
	@audit INT = NULL
)
AS

/*
-- para trest
DECLARE @ContactId INT = 1012
DECLARE @audit INT = 0
*/

DECLARE @IsAuditor BIT

IF (@audit IS NOT NULL AND @audit = 1) 
	BEGIN
		SELECT 
			@IsAuditor = ISNULL(Auditor, 'False')
		FROM Contacts 
		WHERE ContactId = @ContactId 
	END

SELECT 
	P.PostId,
	P.[Description],
	P.Text,
	P.Title,
	P.DateEntered,
	P.ContacCreate,
	CC.LastName + ', ' + CC.FirstName AS 'NameCreate',
	P.ContactAudit,
	CASE WHEN P.ContactAudit IS NOT NULL THEN  CA.LastName + ', ' + CA.FirstName ELSE NULL END 'NameAudit',
	P.StateId,
	P.ImageUrl,
	s.[Description] 'DescriptionState',
	PTI.TypeId,
	TI.Description 'DescriptionTypeImpairment'
FROM [Posts] (NOLOCK) P
	INNER JOIN Contacts (NOLOCK) CC
		ON CC.ContactId = P.ContacCreate
	INNER JOIN States (NOLOCK) S
		ON S.StateId = P.StateId
	LEFT JOIN Contacts (NOLOCK) CA 
		ON CA.ContactId = P.ContactAudit
	LEFT JOIN PostsXTypesImpairment (NOLOCK) PTI
		ON PTI.PostId = P.PostId
	LEFT JOIN TypesImpairment (NOLOCK) TI
		ON PTI.TypeId = TI.TypeId
WHERE
		@ContactId = P.ContacCreate
		OR
		@IsAuditor = 'True'
ORDER BY P.PostId
GO





USE [ParImpar]
GO

/****** Object:  StoredProcedure [dbo].[Events_GetAll]    Script Date: 4/2/2024 18:44:49 ******/
DROP PROCEDURE [dbo].[Events_GetAll]
GO

/****** Object:  StoredProcedure [dbo].[Events_GetAll]    Script Date: 4/2/2024 18:44:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Events_GetAll]
(
	@ContactId INT,
	@audit INT = NULL
)
AS

 /*
-- para trest
DECLARE @ContactId INT = 1
DECLARE @audit INT = 0
*/

DECLARE @IsAuditor BIT = 'False'

IF (@audit IS NOT NULL AND @audit = 1) 
	BEGIN
		SELECT 
			@IsAuditor = ISNULL(Auditor, 'False')
		FROM Contacts 
		WHERE ContactId = @ContactId 
	END

SELECT 
	E.EventId,
	E.EndDate,
	E.StartDate,
	E.[Description],
	E.Title,
	E.DateEntered,
	E.ContacCreate,
	CC.LastName + ', ' + CC.FirstName AS 'NameCreate',
	E.ContactAudit,
	CASE WHEN E.ContactAudit IS NOT NULL THEN  CA.LastName + ', ' + CA.FirstName ELSE NULL END 'NameAudit',
	E.StateId,
	E.ImageUrl,
	s.[Description] 'DescriptionState'
FROM [Events] E (NOLOCK)
	INNER JOIN Contacts (NOLOCK) CC
	ON CC.ContactId = E.ContacCreate
	INNER JOIN States (NOLOCK) S
	ON S.StateId = E.StateId
	LEFT JOIN Contacts (NOLOCK) CA 
	ON CA.ContactId = E.ContactAudit
WHERE
		@ContactId = E.ContacCreate
		OR
		@IsAuditor = 'True'
GO



USE [ParImpar]
GO

/****** Object:  StoredProcedure [dbo].[Search_GetSearch]    Script Date: 4/2/2024 19:07:27 ******/
DROP PROCEDURE [dbo].[Search_GetSearch]
GO

/****** Object:  StoredProcedure [dbo].[Search_GetSearch]    Script Date: 4/2/2024 19:07:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Search_GetSearch]
(
	@SearchText AS VARCHAR(MAX),
	@Filters AS VARCHAR(MAX)
)

AS

/*
-- para trest
DECLARE	@SearchText AS VARCHAR(MAX) = 'title'
DECLARE	@Filters AS VARCHAR(MAX) = null
*/
DECLARE @TableFilters TABLE 
(
	[filter] INT
)

DECLARE @TableSearchText TABLE 
(
	TextFilter varchar(60)
)

DECLARE @PostsAux TABLE 
(
	PostId INT,
	DateOrder DateTime
)

DECLARE @TableSearchAux TABLE
(
	[Key]  VARCHAR(250),
	Id INT,
	StartDate DATETIME,
	NameCreate  VARCHAR(500),
	ContacCreateId INT,
	Description  VARCHAR(MAX),
	Title  VARCHAR(1000),
	ImageUrl VARCHAR(500),
	TypeId  VARCHAR(250),
	TypeDescription VARCHAR(500),
	DateOrder DateTime
)

IF (@SearchText IS NOT NULL)
	BEGIN
		INSERT INTO @TableSearchText
		SELECT value
		FROM STRING_SPLIT(@SearchText , ' ')
	END

INSERT INTO @TableSearchAux
SELECT DISTINCT TOP 50
	'EventId' AS 'Key',
	E.EventId AS 'Id',
	E.StartDate,
	C.LastName + ', ' + C.FirstName AS 'NameCreate',
	C.ContactId AS 'ContacCreateId',
	E.[Description],
	E.Title,
	E.ImageUrl,
	NULL 'TypeId',
	NULL 'TypeDescription',
	ISNULL(ISNULL(ISNULL(E.EndDate, E.StartDate),E.DateModify), E.DateEntered)
FROM [Events] (NOLOCK) E
	INNER JOIN Contacts (NOLOCK) C
		ON C.ContactId = E.ContacCreate
WHERE EXISTS (
				SELECT TextFilter 
				FROM @TableSearchText AUX
				WHERE 
				E.Title LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
				OR
				E.Description LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
			)
		OR (@SearchText IS NULL)
		AND E.StateId = 2
ORDER BY ISNULL(ISNULL(ISNULL(E.EndDate, E.StartDate),E.DateModify), E.DateEntered) DESC

IF (@Filters IS NOT NULL)
	BEGIN
		INSERT INTO @TableFilters
		SELECT value
		FROM STRING_SPLIT(@Filters , ',')

		IF EXISTS(SELECT * FROM @TableFilters) 
			BEGIN
				INSERT INTO @PostsAux
				SELECT DISTINCT TOP 50
					PTI.PostId,
					ISNULL(P.DateModify, P.DateEntered)
				FROM [Posts] (NOLOCK) P
					LEFT JOIN PostsXTypesImpairment (NOLOCK) PTI
						ON PTI.PostId = P.PostId 
				WHERE 
					( 
						PTI.TypeId IN (SELECT * FROM @TableFilters)
					) 
					AND P.StateId = 2
				ORDER BY ISNULL(P.DateModify, P.DateEntered) DESC
			END
		  ELSE 
			BEGIN
				INSERT INTO @PostsAux
				SELECT DISTINCT TOP 50
					PTI.PostId,
					ISNULL(P.DateModify, P.DateEntered)
				FROM [Posts] (NOLOCK) P
					LEFT JOIN PostsXTypesImpairment (NOLOCK) PTI
						ON PTI.PostId = P.PostId 
				WHERE  P.StateId = 2
				ORDER BY ISNULL(P.DateModify, P.DateEntered) DESC
			END
	END
  ELSE 
	BEGIN
		INSERT INTO @PostsAux
		SELECT DISTINCT TOP 50
			PTI.PostId,
			ISNULL(P.DateModify, P.DateEntered)
		FROM [Posts] (NOLOCK) P
			LEFT JOIN PostsXTypesImpairment (NOLOCK) PTI
				ON PTI.PostId = P.PostId 
		WHERE  P.StateId = 2
		ORDER BY ISNULL(P.DateModify, P.DateEntered) DESC
	END

IF @Filters IS NOT NULL
	BEGIN
		INSERT INTO @PostsAux
		SELECT DISTINCT TOP 50
			P.PostId,
			ISNULL(P.DateModify, P.DateEntered)
		FROM [Posts] (NOLOCK) P
			INNER JOIN @PostsAux PA
				ON P.PostId = PA.PostId
		WHERE EXISTS (
					SELECT TextFilter 
					FROM @TableSearchText AUX
					WHERE 
					P.Title LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
					OR
					P.Description LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
					OR
					P.Text LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
				)
			OR (@SearchText IS NULL)
			AND P.StateId = 2
		ORDER BY ISNULL(P.DateModify, P.DateEntered) DESC
	END
  ELSE 
	BEGIN
		INSERT INTO @PostsAux
		SELECT DISTINCT TOP 50
			P.PostId,
			ISNULL(P.DateModify, P.DateEntered)
		FROM [Posts] (NOLOCK) P
			INNER JOIN @PostsAux PA
				ON P.PostId = PA.PostId
		WHERE EXISTS (
					SELECT TextFilter 
					FROM @TableSearchText AUX
					WHERE 
					P.Title LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
					OR
					P.Description LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
					OR
					P.Text LIKE (SELECT CONCAT('%', AUX.TextFilter ,'%'))
				)
			OR (@SearchText IS NULL)
			AND P.StateId = 2
	END
	
INSERT INTO @TableSearchAux
	SELECT
		'PostId' AS 'Key',
		P.PostId AS 'Id',
		NULL 'StartDate',
		C.LastName + ', ' + C.FirstName AS 'NameCreate',
		C.ContactId AS 'ContacCreateId',
		P.[Description],
		P.Title,
		P.ImageUrl,
		PTI.TypeId,
		TI.Description 'TypeDescription',
		ISNULL(P.DateModify, P.DateEntered)
	FROM [Posts] (NOLOCK) P
		INNER JOIN Contacts (NOLOCK) C
			ON C.ContactId = P.ContacCreate
		INNER JOIN PostsXTypesImpairment (NOLOCK) PTI
			ON PTI.PostId = P.PostId
		INNER JOIN TypesImpairment (NOLOCK) TI
			ON PTI.TypeId = TI.TypeId
		INNER JOIN @PostsAux PA
			ON PA.PostId = P.PostId

			
SELECT DISTINCT * FROM @TableSearchAux ORDER BY [Key], Id, DateOrder DESC

INSERT INTO ActionLog 
(
	filters,
	SearchText,
	ActionTypeId,
	DateEntered
) 
VALUES 
(
	@Filters,
	@SearchText,
	1,
	GETDATE()
)
GO



USE [ParImpar]
GO

/** Object:  StoredProcedure [dbo].[Contact_ChangePassword]    Script Date: 7/2/2024 21:09:37 **/
DROP PROCEDURE [dbo].[Contact_ChangePassword]
GO

/** Object:  StoredProcedure [dbo].[Contact_ChangePassword]    Script Date: 7/2/2024 21:09:37 **/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Contact_ChangePassword]
(
	@ContactId INT,
	@LastPassword VARCHAR(100),
	@NewPassword VARCHAR(100),
	@ResultCode INT OUTPUT
)
AS


/*
-- Para testing
DECLARE @ContactId INT = 1
DECLARE @LastPassword VARCHAR(100) = 'ed78vWPkU9hDRVUf10qkfA=='
DECLARE	@NewPassword VARCHAR(100) = 'OAqUPf+4PtAiey0+UVBDkA=='
DECLARE @ResultCode INT
*/


SET @ResultCode = 200

IF (SELECT COUNT(ContactId) FROM Contacts (NOLOCK) WHERE ContactId = @ContactId AND [Password] = @NewPassword ) <> 0
	BEGIN
		SET @ResultCode = 5911
	END
	
IF @ResultCode = 200 AND (SELECT COUNT(ContactId) FROM Contacts (NOLOCK) WHERE ContactId = @ContactId AND [Password] != @LastPassword ) <> 0
	BEGIN
		SET @ResultCode = 5909
	END


IF @ResultCode = 200
	BEGIN
		UPDATE Contacts 
		SET [Password] = @NewPassword
		WHERE ContactId = @ContactId

		IF @@ROWCOUNT = 0
			BEGIN 
				SET @ResultCode = 404 
			END
		  ELSE 
			BEGIN
				INSERT INTO ActionLog 
				(
					ObjectKey, 
					ObjectId,
					ContactId,
					ActionTypeId,
					DateEntered
				) 
				VALUES 
				(
					'ContactId', 
					@ContactId,
					@ContactId,
					15,
					GETDATE()
				)
				SET @ResultCode = 200 
			END
	END
GO
