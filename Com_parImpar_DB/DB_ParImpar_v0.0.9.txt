/** SE EDITO LA TABLA DenyObject **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DenyObject
	DROP CONSTRAINT FK_DenyObject_Contacts
GO
ALTER TABLE dbo.Contacts SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_DenyObject
	(
	ObjectKey varchar(255) NOT NULL,
	ObjectId int NOT NULL,
	Reason varchar(6000) NULL,
	ContactId int NULL,
	DenyObject int NOT NULL IDENTITY (1, 1)
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_DenyObject SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_DenyObject ON
GO
IF EXISTS(SELECT * FROM dbo.DenyObject)
	 EXEC('INSERT INTO dbo.Tmp_DenyObject (ObjectKey, ObjectId, Reason, ContactId, DenyObject)
		SELECT ObjectKey, ObjectId, Reason, ContactId, DenyObject FROM dbo.DenyObject WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_DenyObject OFF
GO
DROP TABLE dbo.DenyObject
GO
EXECUTE sp_rename N'dbo.Tmp_DenyObject', N'DenyObject', 'OBJECT' 
GO
ALTER TABLE dbo.DenyObject ADD CONSTRAINT
	PK_DenyObject PRIMARY KEY CLUSTERED 
	(
	DenyObject
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.DenyObject ADD CONSTRAINT
	FK_DenyObject_Contacts FOREIGN KEY
	(
	ContactId
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT

/** SE EDITO LA TABLA EVENTS **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__StateId__5EBF139D
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__ContactA__5FB337D6
GO
ALTER TABLE dbo.Contacts SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK_Events_States
GO
ALTER TABLE dbo.States SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Events
	(
	EventId int NOT NULL IDENTITY (1, 1),
	Description varchar(5000) NULL,
	Title varchar(1000) NULL,
	DateEntered datetime NOT NULL,
	StartDate datetime NULL,
	EndDate datetime NULL,
	ContacCreate int NOT NULL,
	ContactAudit int NULL,
	StateId int NOT NULL,
	DateModify datetime NULL,
	ImageUrl varchar(500) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Events SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Events ON
GO
IF EXISTS(SELECT * FROM dbo.Events)
	 EXEC('INSERT INTO dbo.Tmp_Events (EventId, Description, Title, DateEntered, StartDate, EndDate, ContacCreate, ContactAudit, StateId, DateModify, ImageUrl)
		SELECT EventId, Description, Title, DateEntered, StartDate, EndDate, ContacCreate, ContactAudit, StateId, DateModify, CONVERT(varchar(500), ImageUrl) FROM dbo.Events WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Events OFF
GO
DROP TABLE dbo.Events
GO
EXECUTE sp_rename N'dbo.Tmp_Events', N'Events', 'OBJECT' 
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	PK__Events__7944C810D6BCD312 PRIMARY KEY CLUSTERED 
	(
	EventId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK_Events_States FOREIGN KEY
	(
	StateId
	) REFERENCES dbo.States
	(
	StateId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__StateId__5EBF139D FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__ContactA__5FB337D6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT


/** SE EDITO LA TABLA POSTS **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__StateId__7D439ABD
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__ContactAu__7E37BEF6
GO
ALTER TABLE dbo.Contacts SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK_Posts_States
GO
ALTER TABLE dbo.States SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Posts
	(
	PostId int NOT NULL IDENTITY (1, 1),
	Description varchar(5000) NULL,
	Text varchar(MAX) NULL,
	Title varchar(1000) NULL,
	DateEntered datetime NOT NULL,
	DateModify datetime NULL,
	ContacCreate int NOT NULL,
	ContactAudit int NULL,
	ImageUrl varchar(500) NULL,
	StateId int NOT NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Posts SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Posts ON
GO
IF EXISTS(SELECT * FROM dbo.Posts)
	 EXEC('INSERT INTO dbo.Tmp_Posts (PostId, Description, Text, Title, DateEntered, DateModify, ContacCreate, ContactAudit, ImageUrl, StateId)
		SELECT PostId, Description, Text, Title, DateEntered, DateModify, ContacCreate, ContactAudit, ImageUrl, StateId FROM dbo.Posts WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Posts OFF
GO
ALTER TABLE dbo.PostsXTypesImpairment
	DROP CONSTRAINT FK_PostsXTypesImpairment_Posts
GO
DROP TABLE dbo.Posts
GO
EXECUTE sp_rename N'dbo.Tmp_Posts', N'Posts', 'OBJECT' 
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	PK__Posts__AA1260180BDE6FC4 PRIMARY KEY CLUSTERED 
	(
	PostId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK_Posts_States FOREIGN KEY
	(
	StateId
	) REFERENCES dbo.States
	(
	StateId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__StateId__7D439ABD FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__ContactAu__7E37BEF6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PostsXTypesImpairment ADD CONSTRAINT
	FK_PostsXTypesImpairment_Posts FOREIGN KEY
	(
	PostId
	) REFERENCES dbo.Posts
	(
	PostId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.PostsXTypesImpairment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

/** Se creo la tabla ContactXEvent **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.ContactXEvent
	(
	ContactEventId int NOT NULL IDENTITY (1, 1),
	ContactId int NOT NULL,
	EventId int NOT NULL,
	DateEntered datetime NOT NULL,
	DateCancellation datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.ContactXEvent ADD CONSTRAINT
	PK_Table_1 PRIMARY KEY CLUSTERED 
	(
	ContactEventId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ContactXEvent SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

/** Se creo la tabla ContactXTypeImplairment **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.ContactXTypeImplairment
	(
	ContactTypeImplairmentId int NOT NULL IDENTITY (1, 1),
	ContactId int NOT NULL,
	TypeId int NOT NULL,
	DateEntered datetime NOT NULL,
	DateDelete datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.ContactXTypeImplairment ADD CONSTRAINT
	PK_Table_1 PRIMARY KEY CLUSTERED 
	(
	ContactTypeImplairmentId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ContactXTypeImplairment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


/** Se agrego el campo Notificatoions en la tabla Contacts **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Contacts
	(
	ContactId int NOT NULL IDENTITY (1, 1),
	FirstName varchar(100) NULL,
	LastName varchar(100) NULL,
	dateEntered datetime NULL,
	Email varchar(100) NOT NULL,
	Password varchar(100) NOT NULL,
	UserName varchar(100) NULL,
	DateBrirth date NULL,
	Auditor bit NULL,
	[Confirm] bit NULL,
	Notifications bit NULL,
	ConfirmCode varchar(100) NULL,
	ExpiredRecover datetime NULL,
	CodeRecover varchar(100) NULL,
	ImageUrl nchar(255) NULL,
	DateModify datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Contacts SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Contacts ON
GO
IF EXISTS(SELECT * FROM dbo.Contacts)
	 EXEC('INSERT INTO dbo.Tmp_Contacts (ContactId, FirstName, LastName, dateEntered, Email, Password, UserName, DateBrirth, Auditor, [Confirm], ConfirmCode, ExpiredRecover, CodeRecover, ImageUrl, DateModify)
		SELECT ContactId, FirstName, LastName, dateEntered, Email, Password, UserName, DateBrirth, Auditor, [Confirm], ConfirmCode, ExpiredRecover, CodeRecover, ImageUrl, DateModify FROM dbo.Contacts WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Contacts OFF
GO
ALTER TABLE dbo.ActionLog
	DROP CONSTRAINT FK_ActionLog_Contacts
GO
ALTER TABLE dbo.DenyObject
	DROP CONSTRAINT FK_DenyObject_Contacts
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__StateId__5EBF139D
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__ContactA__5FB337D6
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__StateId__7D439ABD
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__ContactAu__7E37BEF6
GO
DROP TABLE dbo.Contacts
GO
EXECUTE sp_rename N'dbo.Tmp_Contacts', N'Contacts', 'OBJECT' 
GO
ALTER TABLE dbo.Contacts ADD CONSTRAINT
	PK__Contact__CFED658FE377AA2D PRIMARY KEY CLUSTERED 
	(
	ContactId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__StateId__7D439ABD FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__ContactAu__7E37BEF6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__StateId__5EBF139D FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__ContactA__5FB337D6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DenyObject ADD CONSTRAINT
	FK_DenyObject_Contacts FOREIGN KEY
	(
	ContactId
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.DenyObject SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ActionLog ADD CONSTRAINT
	FK_ActionLog_Contacts FOREIGN KEY
	(
	ContactId
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ActionLog SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


/** Se agrego el Trusted al Contact (usuario de condifanza) **/
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Contacts
	(
	ContactId int NOT NULL IDENTITY (1, 1),
	FirstName varchar(100) NULL,
	LastName varchar(100) NULL,
	dateEntered datetime NULL,
	Email varchar(100) NOT NULL,
	Password varchar(100) NOT NULL,
	UserName varchar(100) NULL,
	DateBrirth date NULL,
	Auditor bit NULL,
	[Confirm] bit NULL,
	Trusted bit NULL,
	Notifications bit NULL,
	ConfirmCode varchar(100) NULL,
	ExpiredRecover datetime NULL,
	CodeRecover varchar(100) NULL,
	ImageUrl nchar(255) NULL,
	DateModify datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Contacts SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Contacts ON
GO
IF EXISTS(SELECT * FROM dbo.Contacts)
	 EXEC('INSERT INTO dbo.Tmp_Contacts (ContactId, FirstName, LastName, dateEntered, Email, Password, UserName, DateBrirth, Auditor, [Confirm], Notifications, ConfirmCode, ExpiredRecover, CodeRecover, ImageUrl, DateModify)
		SELECT ContactId, FirstName, LastName, dateEntered, Email, Password, UserName, DateBrirth, Auditor, [Confirm], Notifications, ConfirmCode, ExpiredRecover, CodeRecover, ImageUrl, DateModify FROM dbo.Contacts WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Contacts OFF
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__StateId__7D439ABD
GO
ALTER TABLE dbo.Posts
	DROP CONSTRAINT FK__Posts__ContactAu__7E37BEF6
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__StateId__5EBF139D
GO
ALTER TABLE dbo.Events
	DROP CONSTRAINT FK__Events__ContactA__5FB337D6
GO
ALTER TABLE dbo.DenyObject
	DROP CONSTRAINT FK_DenyObject_Contacts
GO
ALTER TABLE dbo.ActionLog
	DROP CONSTRAINT FK_ActionLog_Contacts
GO
DROP TABLE dbo.Contacts
GO
EXECUTE sp_rename N'dbo.Tmp_Contacts', N'Contacts', 'OBJECT' 
GO
ALTER TABLE dbo.Contacts ADD CONSTRAINT
	PK__Contact__CFED658FE377AA2D PRIMARY KEY CLUSTERED 
	(
	ContactId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ActionLog ADD CONSTRAINT
	FK_ActionLog_Contacts FOREIGN KEY
	(
	ContactId
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ActionLog SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DenyObject ADD CONSTRAINT
	FK_DenyObject_Contacts FOREIGN KEY
	(
	ContactId
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.DenyObject SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__StateId__5EBF139D FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events ADD CONSTRAINT
	FK__Events__ContactA__5FB337D6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Events SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__StateId__7D439ABD FOREIGN KEY
	(
	ContacCreate
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts ADD CONSTRAINT
	FK__Posts__ContactAu__7E37BEF6 FOREIGN KEY
	(
	ContactAudit
	) REFERENCES dbo.Contacts
	(
	ContactId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Posts SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



ALTER PROCEDURE [dbo].[Contact_GetById]
(
	@ContactId INT,
	@ActionLog INT
)

AS


/*
--para test
DECLARE @ContactId INT = 1
*/

SELECT
	ContactId,
	FirstName,
	LastName,
	UserName,
	LastName + ', ' + FirstName 'Name',
	email,
	ISNULL(Auditor, 'False') 'Auditor',
	Trusted,
	Notifications,
	DateBrirth,
	ImageUrl
FROM Contacts (NOLOCK) 
WHERE ContactId = @ContactId

IF EXISTS (SELECT ContactId FROM Contacts (NOLOCK)WHERE ContactId = @ContactId) AND @ActionLog = 1
	BEGIN
		INSERT INTO ActionLog 
		(
			ObjectKey, 
			ObjectId,
			ContactId,
			ActionTypeId,
			DateEntered
		) 
		VALUES 
		(
			'ContactId', 
			@ContactId,
			@ContactId,
			13,
			GETDATE()
		)
	END

ALTER PROCEDURE [dbo].[Contact_Regisrter]
(
	@Email VARCHAR(100),
	@UserName VARCHAR(100),
	@LastName VARCHAR(100),
	@FirstName VARCHAR(100),
	@Password VARCHAR(100),
	@DateBrirth Date,
	@Notifications BIT,
	@ConfirmCode VARCHAR(100) OUTPUT,
	@ResultCode INT OUTPUT,
	@ContactId INT OUTPUT
)

AS

/*
--para test
DECLARE @Email VARCHAR(100)
DECLARE @Password VARCHAR(100)
DECLARE @LastName VARCHAR(100)
DECLARE @UserName VARCHAR(100)
DECLARE @FistName VARCHAR(100)
DECLARE @DateBrirth Date
DECLARE @ResultCode INT
DECLARE @Notifications BIT

SET @Email = 'Gastonvottero@gmail.com'
SET @Password = 'GQfx8ucJ62jDe7AbgeEW5A=='
SET @LastName = 'Test'
SET @FistName = 'Test'
SET @UserName = 'Test'
SET @DateBrirth = GETDATE()
*/

SET @ConfirmCode = NEWID()
SET @ResultCode = 200
DECLARE @ContactAux INT = 0;

IF (@UserName IS NULL OR @UserName = '')
	BEGIN
		SET @ResultCode = 5001
	END

IF (@Password IS NULL OR @Password = '') AND  @ResultCode = 200
	BEGIN
		SET @ResultCode = 5002
	END

IF (@Email IS NULL OR @Email = '') AND  @ResultCode = 200
	BEGIN
		SET @ResultCode = 5003
	END

IF (@FirstName IS NULL OR @FirstName = '') AND  @ResultCode = 200
	BEGIN
		SET @ResultCode = 5004
	END

IF (@LastName IS NULL OR @LastName = '') AND @ResultCode = 200
	BEGIN
		SET @ResultCode = 5005
	END


IF (SELECT  COUNT(ContactId) FROM Contacts (NOLOCK) WHERE Email = @Email AND ISNULL([Confirm], 'False') <> 'False') > 0 AND @ResultCode = 200
	BEGIN
		SET @ResultCode = 5906
	END

IF @ResultCode = 200
	BEGIN
		SELECT TOP 1 @ContactAux = ISNULL(ContactId,0) FROM Contacts (NOLOCK) WHERE Email = @Email AND ISNULL([Confirm], 'False') = 'False'
		IF @ContactAux <> 0
			BEGIN
				UPDATE Contacts
				SET
					FirstName = @FirstName, 
					LastName = @LastName, 
					Email = @Email, 
					[Password] = @Password, 
					UserName = @UserName, 
					DateBrirth =  @DateBrirth, 
					[Confirm] = 'False',
					ConfirmCode = @ConfirmCode, 
					Notifications = @Notifications,
					dateEntered = GETDATE()
				WHERE ContactId = @ContactAux

				SET @ContactId = @ContactAux
			END
		  ELSE
			BEGIN
				INSERT INTO Contacts (FirstName, LastName, Email, [Password], UserName, DateBrirth, [Confirm], ConfirmCode, dateEntered) 
				VALUES (@FirstName, @LastName, @Email,@Password, @UserName, @DateBrirth, 'False', @ConfirmCode, GETDATE())

				SET @ContactId = @@IDENTITY;

				IF @@ROWCOUNT = 0 
					BEGIN 
						SET @ResultCode = 500 
					END
			END
	END


USE [ParImpar]
GO
/****** Object:  StoredProcedure [dbo].[Contact_Update]    Script Date: 28/10/2023 20:25:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[Contact_Update]
(
	@UserName VARCHAR(100),
	@LastName VARCHAR(100),
	@FirstName VARCHAR(100),
	@ContactId INT,
	@Notifications BIT,
	@DateBrirth Date,
	@ResultCode INT OUTPUT
)

AS

/*
--para test
DECLARE @LastName VARCHAR(100)
DECLARE @UserName VARCHAR(100)
DECLARE @FirstName VARCHAR(100)
DECLARE @DateBrirth Date
DECLARE @@Notifications BIT
DECLARE @ResultCode INT
DECLARE @ContactId INT

SET @LastName = 'Da Vinci'
SET @FirstName = 'Leonardo'
SET @UserName = 'Pintureria la Mona'
SET @DateBrirth = GETDATE()
SET @ContactId = 1010
*/


SET @ResultCode = 200

IF (@UserName IS NULL OR @UserName = '')
	BEGIN
		SET @ResultCode = 5001
	END


IF (@FirstName IS NULL OR @FirstName = '') AND  @ResultCode = 200
	BEGIN
		SET @ResultCode = 5004
	END

IF (@LastName IS NULL OR @LastName = '') AND @ResultCode = 200
	BEGIN
		SET @ResultCode = 5005
	END



IF @ResultCode = 200
	BEGIN
		UPDATE Contacts
		SET
			FirstName = @FirstName, 
			LastName = @LastName, 
			UserName = @UserName, 
			DateBrirth =  @DateBrirth,
			Notifications = @Notifications,
			DateModify = GETDATE()
		WHERE ContactId = @ContactId

		IF @@ROWCOUNT = 0 
			BEGIN 
				SET @ResultCode = 500 
			END
		  ELSE 
			BEGIN
				INSERT INTO ActionLog 
					(
						ObjectKey, 
						ObjectId,
						ContactId,
						ActionTypeId,
						DateEntered
					) 
					VALUES 
					(
						'ContactId', 
						@ContactId,
						@ContactId,
						9,
						GETDATE()
					)
			END
	END